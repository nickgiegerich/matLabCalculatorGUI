function varargout = MatLab_GUI_Calculator(varargin)
% MATLAB_GUI_CALCULATOR MATLAB code for MatLab_GUI_Calculator.fig
%      MATLAB_GUI_CALCULATOR, by itself, creates a new MATLAB_GUI_CALCULATOR or raises the existing
%      singleton*.
%
%      H = MATLAB_GUI_CALCULATOR returns the handle to a new MATLAB_GUI_CALCULATOR or the handle to
%      the existing singleton*.
%
%      MATLAB_GUI_CALCULATOR('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MATLAB_GUI_CALCULATOR.M with the given input arguments.
%
%      MATLAB_GUI_CALCULATOR('Property','Value',...) creates a new MATLAB_GUI_CALCULATOR or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before MatLab_GUI_Calculator_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to MatLab_GUI_Calculator_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help MatLab_GUI_Calculator

% Last Modified by GUIDE v2.5 10-Jul-2018 10:32:43

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @MatLab_GUI_Calculator_OpeningFcn, ...
                   'gui_OutputFcn',  @MatLab_GUI_Calculator_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before MatLab_GUI_Calculator is made visible.
function MatLab_GUI_Calculator_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to MatLab_GUI_Calculator (see VARARGIN)

% Choose default command line output for MatLab_GUI_Calculator
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes MatLab_GUI_Calculator wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = MatLab_GUI_Calculator_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function mold_L_Callback(hObject, eventdata, handles)
% hObject    handle to mold_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_L as text
%        str2double(get(hObject,'String')) returns contents of mold_L as a double



% --- Executes during object creation, after setting all properties.
function mold_L_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function chip_L_Callback(hObject, eventdata, handles)
% hObject    handle to chip_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of chip_L as text
%        str2double(get(hObject,'String')) returns contents of chip_L as a double
Chip_L = str2double(get(handles.chip_L,'String'));


% --- Executes during object creation, after setting all properties.
function chip_L_CreateFcn(hObject, eventdata, handles)
% hObject    handle to chip_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rdl_L_Callback(hObject, eventdata, handles)
% hObject    handle to rdl_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of rdl_L as text
%        str2double(get(hObject,'String')) returns contents of rdl_L as a double
RDL_L = str2double(get(handles.rdl_L,'String'));


% --- Executes during object creation, after setting all properties.
function rdl_L_CreateFcn(hObject, eventdata, handles)
% hObject    handle to rdl_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function solder_L_Callback(hObject, eventdata, handles)
% hObject    handle to solder_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of solder_L as text
%        str2double(get(hObject,'String')) returns contents of solder_L as a double
Solder_L = str2double(get(handles.solder_L,'String'));


% --- Executes during object creation, after setting all properties.
function solder_L_CreateFcn(hObject, eventdata, handles)
% hObject    handle to solder_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pcb_L_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_L as text
%        str2double(get(hObject,'String')) returns contents of pcb_L as a double






% --- Executes during object creation, after setting all properties.
function pcb_L_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_L (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pcb_kz_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_kz as text
%        str2double(get(hObject,'String')) returns contents of pcb_kz as a double
PCB_kz = str2double(get(handles.pcb_kz,'String'));


% --- Executes during object creation, after setting all properties.
function pcb_kz_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pcb_kxy_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_kxy as text
%        str2double(get(hObject,'String')) returns contents of pcb_kxy as a double
PCB_kxy = str2double(get(handles.pcb_kxy,'String'));


% --- Executes during object creation, after setting all properties.
function pcb_kxy_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pcb_t_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_t as text
%        str2double(get(hObject,'String')) returns contents of pcb_t as a double
PCB_t = str2double(get(handles.pcb_t,'String'));


% --- Executes during object creation, after setting all properties.
function pcb_t_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pcb_W_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_W as text
%        str2double(get(hObject,'String')) returns contents of pcb_W as a double
PCB_W = str2double(get(handles.pcb_W,'String'));


% --- Executes during object creation, after setting all properties.
function pcb_W_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function solder_W_Callback(hObject, eventdata, handles)
% hObject    handle to solder_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of solder_W as text
%        str2double(get(hObject,'String')) returns contents of solder_W as a double
Solder_W = str2double(get(handles.solder_W,'String'));


% --- Executes during object creation, after setting all properties.
function solder_W_CreateFcn(hObject, eventdata, handles)
% hObject    handle to solder_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rdl_W_Callback(hObject, eventdata, handles)
% hObject    handle to rdl_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of rdl_W as text
%        str2double(get(hObject,'String')) returns contents of rdl_W as a double
RDL_W = str2double(get(handles.rdl_W,'String'));


% --- Executes during object creation, after setting all properties.
function rdl_W_CreateFcn(hObject, eventdata, handles)
% hObject    handle to rdl_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function mold_W_Callback(hObject, eventdata, handles)
% hObject    handle to mold_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_W as text
%        str2double(get(hObject,'String')) returns contents of mold_W as a double
Mold_W = str2double(get(handles.mold_W,'String'));


% --- Executes during object creation, after setting all properties.
function mold_W_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function solder_t_Callback(hObject, eventdata, handles)
% hObject    handle to solder_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of solder_t as text
%        str2double(get(hObject,'String')) returns contents of solder_t as a double
Solder_t = str2double(get(handles.solder_t,'String'));


% --- Executes during object creation, after setting all properties.
function solder_t_CreateFcn(hObject, eventdata, handles)
% hObject    handle to solder_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rdl_t_Callback(hObject, eventdata, handles)
% hObject    handle to rdl_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of rdl_t as text
%        str2double(get(hObject,'String')) returns contents of rdl_t as a double
RDL_t = str2double(get(handles.rdl_t,'String'));


% --- Executes during object creation, after setting all properties.
function rdl_t_CreateFcn(hObject, eventdata, handles)
% hObject    handle to rdl_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function chip_t_Callback(hObject, eventdata, handles)
% hObject    handle to chip_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of chip_t as text
%        str2double(get(hObject,'String')) returns contents of chip_t as a double
Chip_t = str2double(get(handles.chip_t,'String'));


% --- Executes during object creation, after setting all properties.
function chip_t_CreateFcn(hObject, eventdata, handles)
% hObject    handle to chip_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function chip_W_Callback(hObject, eventdata, handles)
% hObject    handle to chip_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of chip_W as text
%        str2double(get(hObject,'String')) returns contents of chip_W as a double
Chip_W = str2double(get(handles.chip_W,'String'));

% --- Executes during object creation, after setting all properties.
function chip_W_CreateFcn(hObject, eventdata, handles)
% hObject    handle to chip_W (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function mold_t_Callback(hObject, eventdata, handles)
% hObject    handle to mold_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_t as text
%        str2double(get(hObject,'String')) returns contents of mold_t as a double
Mold_t = str2double(get(handles.mold_t,'String'));


% --- Executes during object creation, after setting all properties.
function mold_t_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_t (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function mold_k_Callback(hObject, eventdata, handles)
% hObject    handle to mold_k (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_k as text
%        str2double(get(hObject,'String')) returns contents of mold_k as a double
Mold_kxy = str2double(get(handles.mold_k,'String'));


% --- Executes during object creation, after setting all properties.
function mold_k_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_k (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function mold_kz_Callback(hObject, eventdata, handles)
% hObject    handle to mold_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_kz as text
%        str2double(get(hObject,'String')) returns contents of mold_kz as a double
Mold_kz = str2double(get(handles.mold_kz,'String'));


% --- Executes during object creation, after setting all properties.
function mold_kz_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function chip_kxy_Callback(hObject, eventdata, handles)
% hObject    handle to chip_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of chip_kxy as text
%        str2double(get(hObject,'String')) returns contents of chip_kxy as a double
Chip_kxy = str2double(get(handles.chip_kxy,'String'));


% --- Executes during object creation, after setting all properties.
function chip_kxy_CreateFcn(hObject, eventdata, handles)
% hObject    handle to chip_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function chip_kz_Callback(hObject, eventdata, handles)
% hObject    handle to chip_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of chip_kz as text
%        str2double(get(hObject,'String')) returns contents of chip_kz as a double
Chip_kz = str2double(get(handles.chip_kz,'String'));


% --- Executes during object creation, after setting all properties.
function chip_kz_CreateFcn(hObject, eventdata, handles)
% hObject    handle to chip_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rdl_kz_Callback(hObject, eventdata, handles)
% hObject    handle to rdl_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of rdl_kz as text
%        str2double(get(hObject,'String')) returns contents of rdl_kz as a double
RDL_kz = str2double(get(handles.rdl_kz,'String'));


% --- Executes during object creation, after setting all properties.
function rdl_kz_CreateFcn(hObject, eventdata, handles)
% hObject    handle to rdl_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rdl_kxy_Callback(hObject, eventdata, handles)
% hObject    handle to rdl_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of rdl_kxy as text
%        str2double(get(hObject,'String')) returns contents of rdl_kxy as a double
RDL_kxy = str2double(get(handles.rdl_kxy,'String'));


% --- Executes during object creation, after setting all properties.
function rdl_kxy_CreateFcn(hObject, eventdata, handles)
% hObject    handle to rdl_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function solder_kz_Callback(hObject, eventdata, handles)
% hObject    handle to solder_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of solder_kz as text
%        str2double(get(hObject,'String')) returns contents of solder_kz as a double
Solder = str2double(get(handles.solder_kz,'String'));


% --- Executes during object creation, after setting all properties.
function solder_kz_CreateFcn(hObject, eventdata, handles)
% hObject    handle to solder_kz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function solder_kxy_Callback(hObject, eventdata, handles)
% hObject    handle to solder_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of solder_kxy as text
%        str2double(get(hObject,'String')) returns contents of solder_kxy as a double
Solder_kxy = str2double(get(handles.solder_kxy,'String'));


% --- Executes during object creation, after setting all properties.
function solder_kxy_CreateFcn(hObject, eventdata, handles)
% hObject    handle to solder_kxy (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in calculate.
function calculate_Callback(hObject, eventdata, handles)
% hObject    handle to calculate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Mold_h = str2double(char(get(handles.mold_h,'String')));
Mold_L = str2double(char(get(handles.mold_L,'String')));
Mold_W = str2double(char(get(handles.mold_W,'String')));
Mold_t = str2double(char(get(handles.mold_t,'String')));
Mold_k = str2double(char(get(handles.mold_k,'String')));

Chip_L = str2double(char(get(handles.chip_L,'String')));
Chip_W = str2double(char(get(handles.chip_W,'String')));
Chip_t = str2double(char(get(handles.chip_t,'String')));

RDL_L = str2double(char(get(handles.rdl_L,'String')));
RDL_W = str2double(char(get(handles.rdl_W,'String')));
RDL_t = str2double(char(get(handles.rdl_t,'String')));
RDL_kxy = str2double(char(get(handles.rdl_kxy,'String')));
RDL_kz = str2double(char(get(handles.rdl_kz,'String')));

bump_L = str2double(char(get(handles.solder_L,'String')));
bump_W = str2double(char(get(handles.solder_W,'String')));
bump_t = str2double(char(get(handles.solder_t,'String')));
bump_kxy = str2double(char(get(handles.solder_kxy,'String')));
bump_kz = str2double(char(get(handles.solder_kz,'String')));

PCB_L = str2double(char(get(handles.pcb_L,'String')));
PCB_W = str2double(char(get(handles.pcb_W,'String')));
PCB_t = str2double(char(get(handles.pcb_t,'String')));
PCB_kxy = str2double(char(get(handles.pcb_kxy,'String')));
PCB_kz = str2double(char(get(handles.pcb_kz,'String')));
PCB_h = str2double(char(get(handles.pcb_h,'String')));

% Checking conditional so we can run the calculations 
if ~isempty(Mold_h) && ~isempty(PCB_h)
    v(1) = Mold_h;          
    v(2) = Mold_L/1000;
    v(3) = Mold_W/1000; 
    v(4) = Mold_t/1000; 
    v(5) = Mold_k;
    
    v(6) = Chip_L/1000;              
    v(7) = Chip_W/1000;              
    v(8) = Chip_t/1000;
    
    v(9) = RDL_L/1000;               
    v(10) = RDL_W/1000;              
    v(11) = RDL_t/1000;         
    v(12) = RDL_kxy;        
    v(13) = RDL_kz;
    v(14) = bump_L/1000;          
    v(15) = bump_W/1000;           
    v(16) = bump_t/1000;      
    v(17) = bump_kxy;      
    v(18) = bump_kz;
    
    v(19) = PCB_L/1000;           
    v(20) = PCB_W/1000;               
    v(21) = PCB_t/1000;         
    v(22) = PCB_kxy;          
    v(23) = PCB_kz; 
    v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);
 
% -------- Set Resistance Reference Values ---------------
Rconv_mold0 = Rconv_mold;
R_mold0 = R_mold;
R_RDL0 = R_RDL;
R_bump0 = R_bump;
R_pcb0 = R_pcb;
Rconv_pcb0 = Rconv_pcb;
R_up0 = R_up;
R_down0 = R_down; 
Rtotal0 = Rtotal;

Percent_up = (1/R_up0)/(1/R_up0+1/R_down0);                    % -----  output ratio_up  ----------
Percent_down = (1/R_down0)/(1/R_up0+1/R_down0);         % -----  output ratio_down  ----------

Wt_conv_pcb = (Rconv_pcb0/R_down0)*Percent_down;        % -----  output Weighting of conv_pcb  ----------
Wt_pcb = (R_pcb0/R_down0)*Percent_down;                          % -----  output Weighting of pcb  ----------
Wt_bump = (R_bump0/R_down0)*Percent_down;                  % -----  output Weighting of bump  ----------
Wt_rdl = (R_RDL0/R_down0)*Percent_down;                          % -----  output Weighting of RDL  ----------

Wt_mold = (R_mold0/R_up0)*Percent_up;                               % -----  output Weighting of mold  ----------
Wt_conv_mold = (Rconv_mold0/R_up0)*Percent_up;   % -----  output Weighting of conv_mold  ----------

set(handles.rca_up,'String',Rconv_mold);
set(handles.r_mold,'String',R_mold0);
set(handles.r_rdl,'String',R_RDL);
set(handles.r_bump,'String',R_bump);
set(handles.r_pcb,'String',R_pcb);
set(handles.rca_down,'String',Rconv_pcb);
set(handles.percentUp,'String',Percent_up*100);
set(handles.percentDown,'String',Percent_down*100);
set(handles.r_total,'String',Rtotal0);

end




function pcb_h_Callback(hObject, eventdata, handles)
% hObject    handle to pcb_h (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of pcb_h as text
%        str2double(get(hObject,'String')) returns contents of pcb_h as a double


% --- Executes during object creation, after setting all properties.
function pcb_h_CreateFcn(hObject, eventdata, handles)
% hObject    handle to pcb_h (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function mold_h_Callback(hObject, eventdata, handles)
% hObject    handle to mold_h (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of mold_h as text
%        str2double(get(hObject,'String')) returns contents of mold_h as a double


% --- Executes during object creation, after setting all properties.
function mold_h_CreateFcn(hObject, eventdata, handles)
% hObject    handle to mold_h (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in plot_1.
function plot_1_Callback(hObject, eventdata, handles)
% hObject    handle to plot_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Mold_h = str2double(char(get(handles.mold_h,'String')));
Mold_L = str2double(char(get(handles.mold_L,'String')));
Mold_W = str2double(char(get(handles.mold_W,'String')));
Mold_t = str2double(char(get(handles.mold_t,'String')));
Mold_k = str2double(char(get(handles.mold_k,'String')));

Chip_L = str2double(char(get(handles.chip_L,'String')));
Chip_W = str2double(char(get(handles.chip_W,'String')));
Chip_t = str2double(char(get(handles.chip_t,'String')));

RDL_L = str2double(char(get(handles.rdl_L,'String')));
RDL_W = str2double(char(get(handles.rdl_W,'String')));
RDL_t = str2double(char(get(handles.rdl_t,'String')));
RDL_kxy = str2double(char(get(handles.rdl_kxy,'String')));
RDL_kz = str2double(char(get(handles.rdl_kz,'String')));

bump_L = str2double(char(get(handles.solder_L,'String')));
bump_W = str2double(char(get(handles.solder_W,'String')));
bump_t = str2double(char(get(handles.solder_t,'String')));
bump_kxy = str2double(char(get(handles.solder_kxy,'String')));
bump_kz = str2double(char(get(handles.solder_kz,'String')));

PCB_L = str2double(char(get(handles.pcb_L,'String')));
PCB_W = str2double(char(get(handles.pcb_W,'String')));
PCB_t = str2double(char(get(handles.pcb_t,'String')));
PCB_kxy = str2double(char(get(handles.pcb_kxy,'String')));
PCB_kz = str2double(char(get(handles.pcb_kz,'String')));
PCB_h = str2double(char(get(handles.pcb_h,'String')));
if ~isempty(Mold_h) && ~isempty(PCB_h)
    v(1) = Mold_h;          
    v(2) = Mold_L/1000;
    v(3) = Mold_W/1000; 
    v(4) = Mold_t/1000; 
    v(5) = Mold_k;
    
    v(6) = Chip_L/1000;              
    v(7) = Chip_W/1000;              
    v(8) = Chip_t/1000;
    
    v(9) = RDL_L/1000;               
    v(10) = RDL_W/1000;              
    v(11) = RDL_t/1000;         
    v(12) = RDL_kxy;        
    v(13) = RDL_kz;
    v(14) = bump_L/1000;          
    v(15) = bump_W/1000;           
    v(16) = bump_t/1000;      
    v(17) = bump_kxy;      
    v(18) = bump_kz;
    
    v(19) = PCB_L/1000;           
    v(20) = PCB_W/1000;               
    v(21) = PCB_t/1000;         
    v(22) = PCB_kxy;          
    v(23) = PCB_kz; 
    v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);
 
% -------- Set Resistance Reference Values ---------------
Rconv_mold0 = Rconv_mold;
R_mold0 = R_mold;
R_RDL0 = R_RDL;
R_bump0 = R_bump;
R_pcb0 = R_pcb;
Rconv_pcb0 = Rconv_pcb;
R_up0 = R_up;
R_down0 = R_down; 
Rtotal0 = Rtotal;

Percent_up = (1/R_up0)/(1/R_up0+1/R_down0);                    % -----  output ratio_up  ----------
Percent_down = (1/R_down0)/(1/R_up0+1/R_down0);         % -----  output ratio_down  ----------

Wt_conv_pcb = (Rconv_pcb0/R_down0)*Percent_down;        % -----  output Weighting of conv_pcb  ----------
Wt_pcb = (R_pcb0/R_down0)*Percent_down;                          % -----  output Weighting of pcb  ----------
Wt_bump = (R_bump0/R_down0)*Percent_down;                  % -----  output Weighting of bump  ----------
Wt_rdl = (R_RDL0/R_down0)*Percent_down;                          % -----  output Weighting of RDL  ----------

Wt_mold = (R_mold0/R_up0)*Percent_up;                               % -----  output Weighting of mold  ----------
Wt_conv_mold = (Rconv_mold0/R_up0)*Percent_up;   % -----  output Weighting of conv_mold  ----------
Y = [Wt_conv_pcb*100 Wt_pcb*100 Wt_bump*100 Wt_rdl*100 Wt_mold*100 Wt_conv_mold*100];
%figure('units','normalized','outerposition',[0 0 1 1])
figure
bar3(1:6,[Wt_conv_pcb*100 Wt_pcb*100 Wt_bump*100 Wt_rdl*100 Wt_mold*100 Wt_conv_mold*100],0.5);
labels = {'h-PCB';'PCB';'u-bump';'RDL';'Mold';'h-Mold'};
set(gca,'YTickLabel',labels);
az = 100;
el = 15;
view(az, el);
hold on
ZLabel('(%)');
%labels1 = arrayfun(@(value) num2str(value,'%2.2f'),Y,'UniformOutput',false);
text(1:6,Y,labels1,'HorizontalAlignment','center','VerticalAlignment','bottom')
end


% --- Executes on button press in plot_2.
function plot_2_Callback(hObject, eventdata, handles)
% hObject    handle to plot_2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Mold_h = str2double(char(get(handles.mold_h,'String')));
Mold_L = str2double(char(get(handles.mold_L,'String')));
Mold_W = str2double(char(get(handles.mold_W,'String')));
Mold_t = str2double(char(get(handles.mold_t,'String')));
Mold_k = str2double(char(get(handles.mold_k,'String')));

Chip_L = str2double(char(get(handles.chip_L,'String')));
Chip_W = str2double(char(get(handles.chip_W,'String')));
Chip_t = str2double(char(get(handles.chip_t,'String')));

RDL_L = str2double(char(get(handles.rdl_L,'String')));
RDL_W = str2double(char(get(handles.rdl_W,'String')));
RDL_t = str2double(char(get(handles.rdl_t,'String')));
RDL_kxy = str2double(char(get(handles.rdl_kxy,'String')));
RDL_kz = str2double(char(get(handles.rdl_kz,'String')));

bump_L = str2double(char(get(handles.solder_L,'String')));
bump_W = str2double(char(get(handles.solder_W,'String')));
bump_t = str2double(char(get(handles.solder_t,'String')));
bump_kxy = str2double(char(get(handles.solder_kxy,'String')));
bump_kz = str2double(char(get(handles.solder_kz,'String')));

PCB_L = str2double(char(get(handles.pcb_L,'String')));
PCB_W = str2double(char(get(handles.pcb_W,'String')));
PCB_t = str2double(char(get(handles.pcb_t,'String')));
PCB_kxy = str2double(char(get(handles.pcb_kxy,'String')));
PCB_kz = str2double(char(get(handles.pcb_kz,'String')));
PCB_h = str2double(char(get(handles.pcb_h,'String')));
if ~isempty(Mold_h) && ~isempty(PCB_h)
    v(1) = Mold_h;          
    v(2) = Mold_L/1000;
    v(3) = Mold_W/1000; 
    v(4) = Mold_t/1000; 
    v(5) = Mold_k;
    
    v(6) = Chip_L/1000;              
    v(7) = Chip_W/1000;              
    v(8) = Chip_t/1000;
    
    v(9) = RDL_L/1000;               
    v(10) = RDL_W/1000;              
    v(11) = RDL_t/1000;         
    v(12) = RDL_kxy;        
    v(13) = RDL_kz;
    v(14) = bump_L/1000;          
    v(15) = bump_W/1000;           
    v(16) = bump_t/1000;      
    v(17) = bump_kxy;      
    v(18) = bump_kz;
    
    v(19) = PCB_L/1000;           
    v(20) = PCB_W/1000;               
    v(21) = PCB_t/1000;         
    v(22) = PCB_kxy;          
    v(23) = PCB_kz; 
    v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Rconv_mold0 = Rconv_mold;
R_mold0 = R_mold;
R_RDL0 = R_RDL;
R_bump0 = R_bump;
R_pcb0 = R_pcb;
Rconv_pcb0 = Rconv_pcb;
R_up0 = R_up;
R_down0 = R_down; 
Rtotal0 = Rtotal;

%
%
% ----- Sensitivity Caculation for PCB_h --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h*1.1;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_PCB_h = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for PCB_t --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t*1.1/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_PCB_t = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for PCB_kxy --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy*1.1;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_PCB_kxy = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for PCB_kz --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz*1.1; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_PCB_kz = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Bump_t --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t*1.1/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Bump_t = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Bump_kxy --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy*1.1;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Bump_kxy = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Bump_kz --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz*1.1;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Bump_kz = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for RDL_t --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t*1.1/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_RDL_t = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for RDL_kxy --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy*1.1;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_RDL_kxy = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for RDL_kz --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz*1.1;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_RDL_kz = (1/R_down -1/R_down0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Mold_t --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t*1.1/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Mold_t = (1/R_up -1/R_up0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Mold_k --------------

v(1) = Mold_h;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k*1.1;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;
[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Mold_k = (1/R_up -1/R_up0)/(1/Rtotal);

%
%
% ----- Sensitivity Caculation for Mold_h --------------

v(1) = Mold_h*1.1;
v(2) = Mold_L/1000;              v(3) = Mold_W/1000;               v(4) = Mold_t/1000;          v(5)=Mold_k;          
v(6) = Chip_L/1000;               v(7) = Chip_W/1000;                v(8) = Chip_t/1000;
v(9) = RDL_L/1000;               v(10) = RDL_W/1000;              v(11) = RDL_t/1000;         v(12) = RDL_kxy;         v(13) = RDL_kz;
v(14) = bump_L/1000;          v(15) = bump_W/1000;            v(16) = bump_t/1000;      v(17) = bump_kxy;       v(18) = bump_kz;
v(19) = PCB_L/1000;             v(20) = PCB_W/1000;               v(21) = PCB_t/1000;         v(22) = PCB_kxy;          v(23) = PCB_kz; 
v(24) = PCB_h;

[Rconv_mold,  R_mold,   R_RDL,   R_bump,   R_pcb,  Rconv_pcb,  R_up,  R_down,  Rtotal]=FOWLP_core(v);

Sens_Mold_h = (1/R_up -1/R_up0)/(1/Rtotal);

%
%
% ---- Plotting The Four Sensitivity Graphs ----

figure('units','normalized','outerposition',[0 0 1 1])
h = subplot(2,2,1);
Y1 = [Sens_PCB_t*100 Sens_PCB_kxy*100 Sens_PCB_kz*100];
X1 = 1:3;
bar3(X1*100,Y1,0.5);
az = 100;
el = 15;
view(az, el);
title(h,'PCB');
zlabel(h,'%');
set(h,'YTickLabel',{'PCB-T','PCB-KXY','PCB-KZ'});


hold on
j = subplot(2,2,2);
Y2 = [Sens_Bump_t*100 Sens_Bump_kxy*100 Sens_Bump_kz*100];
bar3(X1*100,Y2,0.5);
view(az, el);
title(j,'u-Bump');
zlabel(j,'%');
set(j,'YTickLabel',{'BUMP-T','BUMP-KXY','BUMP-KZ'});

hold on 
K = subplot(2,2,3);
Y3 = [Sens_RDL_t*100 Sens_RDL_kxy*100 Sens_RDL_kz*100];
bar3(X1,Y3,0.5);
view(az, el);
title(K,'RDL');
zlabel(K,'%');
set(K,'YTickLabel',{'RDL-T','RDL-KXY','RDL-KZ'});

hold on
l = subplot(2,2,4); 
Y4 = [Sens_Mold_t*100 Sens_Mold_k*100];
bar3(1:2,Y4,0.5);
view(az,el);
title(l,'Mold');
zlabel(l,'%');
set(l,'YTickLabel',{'MOLD-T','MOLD-K'});
end


% --- Executes on selection change in popupmenu2.
function popupmenu2_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu2 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu2


% --- Executes during object creation, after setting all properties.
function popupmenu2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in radiobutton1.
function radiobutton1_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton1


% --- Executes on button press in radiobutton2.
function radiobutton2_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton2


% --- Executes on button press in radiobutton3.
function radiobutton3_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton3


% --- Executes on button press in radiobutton6.
function radiobutton6_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton6


% --- Executes on button press in radiobutton16.
function radiobutton16_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton16


% --- Executes on button press in radiobutton15.
function radiobutton15_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton15


% --- Executes on button press in radiobutton14.
function radiobutton14_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton14


% --- Executes on button press in radiobutton13.
function radiobutton13_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton13


% --- Executes on button press in radiobutton12.
function radiobutton12_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton12


% --- Executes on button press in radiobutton11.
function radiobutton11_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton11


% --- Executes on button press in radiobutton10.
function radiobutton10_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton10


% --- Executes on button press in radiobutton9.
function radiobutton9_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton9


% --- Executes on button press in radiobutton8.
function radiobutton8_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton8


% --- Executes on button press in radiobutton7.
function radiobutton7_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton7


% --- Executes on button press in radiobutton17.
function radiobutton17_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton17 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton17


% --- Executes on button press in radiobutton21.
function radiobutton21_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton21 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton21


% --- Executes on button press in radiobutton22.
function radiobutton22_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton22 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton22


% --- Executes on button press in radiobutton23.
function radiobutton23_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton23 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton23


% --- Executes on button press in radiobutton24.
function radiobutton24_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton24 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton24


% --- Executes on button press in radiobutton25.
function radiobutton25_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton25 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton25


% --- Executes on button press in radiobutton26.
function radiobutton26_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton26 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton26


% --- Executes on button press in radiobutton27.
function radiobutton27_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton27 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton27


% --- Executes on button press in radiobutton28.
function radiobutton28_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton28 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton28


% --- Executes on button press in radiobutton29.
function radiobutton29_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton29 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton29


% --- Executes on button press in radiobutton30.
function radiobutton30_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton30 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton30


% --- Executes on button press in radiobutton31.
function radiobutton31_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton31 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton31


% --- Executes on button press in radiobutton32.
function radiobutton32_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton32 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton32
